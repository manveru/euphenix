#!/usr/bin/env ruby
# frozen_string_literal: true

require 'cmdparse'
require 'fileutils'
require 'webrick'
require 'digest/sha2'
require 'irb'
require 'listen'
require 'cgi'

# TODO: consolidate scripts into this executable

# Euphenix contains the CLI for helper utils
class Euphenix
  VERSION = '0.0.1'

  def self.parser
    parser = CmdParse::CommandParser.new(handle_exceptions: :no_help)
    parser.main_options.program_name = 'euphenix'
    parser.main_options.version = Euphenix::VERSION
    parser.main_options.banner = 'Site building on Nix'

    parser.global_options do |opt|
      parser.data = { verbose: false }

      opt.on('--verbose', 'output everything that might help with problems') do
        $VERBOSE = parser.data[:verbose] = true
      end
    end

    parser.add_command(CmdParse::HelpCommand.new)
    parser.add_command(CmdParse::VersionCommand.new)

    parser.add_command(Init.new)

    deploy = Deploy.new
    parser.add_command(deploy)
    deploy.add_command(NetlifyDeploy.new)

    parser.add_command(Server.new, default: true)
    parser.add_command(Build.new)
    parser.add_command(BuildServer.new)

    parser
  end

  class Command < CmdParse::Command
    def params
      option_chain([self]).reverse.map(&:data).reduce(&:merge)
    end

    def option_chain(all)
      this = all.last
      return all unless this.respond_to?(:super_command)

      option_chain(all << this.super_command)
    end
  end

  class Init < Command
    def initialize
      super 'init', takes_commands: false

      @data = {}

      options.on('-f', '--force', 'force overwriting files') do
        data[:force] = true
      end
    end

    def execute
      Dir.glob(File.expand_path('../example/**/*', __dir__)) do |file|
        copy file
      end
    end

    def copy(file)
      if File.file?(file)
        warn "won't override existing default.nix but here's what it'd look like:"
        puts template
      else
        FileUtils.cp(file, '.')
      end
    end
  end

  class NonCachingFileHandler < WEBrick::HTTPServlet::FileHandler
    def prevent_caching(res)
      res['ETag'] = (Digest::SHA256.file(res.body.path) if res.body.respond_to?(:path))
      res['Last-Modified'] = Time.at(0)
      res['Cache-Control'] = 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
      res['Pragma']        = 'no-cache'
      res['Expires'] = Time.at(9_999_999_999)
    end

    def do_GET(req, res)
      super
      prevent_caching(res)
    end

    def do_HEAD(req, res)
      super
      prevent_caching(res)
    end
  end

  class Server < Command
    def initialize
      super 'server', takes_commands: false

      @data = { port: 8000 }

      options.on('-p', '--port', 'port') do |value|
        data[:port] = value
      end
    end

    def execute
      ENV['LIVEJS'] = 'true'

      p system('@nix@ -L build .#site')
      p $CHILD_STATUS

      Thread.new do
        listener = Listen.to '.' do |modified, added, removed|
          unless added.include?(File.join(Dir.pwd, 'result'))
            pp modified: modified if modified.any?
            pp added: added if added.any?
            pp removed: removed if removed.any?
            system('@nix@ -L build .#site')
            p $CHILD_STATUS
          end
        end

        listener.start
      end

      File.open('euphenix_server.log', 'w+') do |log_file|
        log = WEBrick::Log.new(log_file)
        server = ::WEBrick::HTTPServer.new(
          Port: params[:port],
          Logger: log,
          AccessLog: [[log_file, WEBrick::AccessLog::COMBINED_LOG_FORMAT]]
        )
        server.mount('/', NonCachingFileHandler, Dir.pwd + '/result')

        trap('INT') { server.stop }
        server.start
      end
    end
  end

  # Build the website
  class Build < Command
    def initialize
      super 'build', takes_commands: false
      @data = {}
    end

    def execute
      system('@nix@ build .#site')
    end
  end

  class BuildServerHandler < WEBrick::HTTPServlet::AbstractServlet
    def do_GET(request, response)
      query = CGI.parse(request.query_string)
      flake = query.fetch('flake')[0]

      system("@nix@ -L build #{flake}#site.tarball -o site.tar.xz")

      response.status = 200
      response['Content-Type'] = 'application/x-gtar'
      response.body = File.open('site.tar.xz')
    end
  end

  class BuildServer < Command
    def initialize
      super 'build-server', takes_commands: false

      @data = { port: 8000 }

      options.on('-p', '--port', 'port') do |value|
        data[:port] = value
      end
    end

    def execute
      log = WEBrick::Log.new(STDOUT)
      server = ::WEBrick::HTTPServer.new(
        Port: params[:port],
        Logger: log,
        AccessLog: [[STDOUT, WEBrick::AccessLog::COMBINED_LOG_FORMAT]]
      )
      server.mount('/build', BuildServerHandler)

      trap('INT') { server.stop }
      server.start
    end
  end

  # Deploy site common class
  class Deploy < Command
    def initialize
      super 'deploy'
    end
  end

  # Deploy to netlify
  class NetlifyDeploy < Command
    def initialize
      super 'netlify', takes_commands: false

      @data = {}
    end

    def execute
      system('@nix@ -L build -o site')
      system('@netlify@', 'deploy', '--prod', '--dir', 'site')
    end
  end
end

Euphenix.parser.parse
